from collections import deque
from spydrnet.ir.port import Port


class Composer:

    def __init__(self):
        self.file = None
        self.direction_string_map = dict()
        self.direction_string_map[Port.Direction.IN] = "input"
        self.direction_string_map[Port.Direction.OUT] = "output"
        self.direction_string_map[Port.Direction.INOUT] = "inout"
        self.direction_string_map[Port.Direction.UNDEFINED] = "/* undefined port direction */ inout"

    def run(self, ir, file_out = "out.v"):
        self._open_file(file_out)
        self._compose(ir)
        

    def _open_file(self, file_name):
        f = open(file_name, "w")
        self.file = f

    def _compose(self, netlist):
        self._write_header(netlist)
        instance = netlist.top_instance
        if instance is not None:
            self._write_from_top(instance)
        
    def _write_header(self, netlist):
        self.file.write("////////////////////////////////////////\n")
        self.file.write("//File generated by SpyDrNet\n")
        if netlist.name is not None:
            self.file.write("//Netlist: " + netlist.name + "\n")
        self.file.write("////////////////////////////////////////\n")
        if netlist.top_instance is None:
            print("WARNING: Netlist has no top instance. Empty file written")
            self.file.write("//top instance is none.\n")

    def _write_from_top(self, instance):
        written = set()
        to_write = deque()
        to_write.append(instance.reference)
        while(len(to_write) != 0):
            definition = to_write.popleft()
            if definition in written:
                continue
            written.add(definition)
            for c in definition.children:
                if c.reference not in written:
                    to_write.append(c.reference)
            self._write_definition_single(definition)

    def _write_definition_single(self, definition):
        if "VERILOG.primative" in definition and definition["VERILOG.primative"] == True:
            return #no need to write the primative definition out, vivado already knows.
        self.file.write("module ")
        self._write_escapable_name(definition.name)
        self.file.write("\n")
        self._write_ports(definition)

        for c in definition.cables:
            self._write_cable(c)

        for i in definition.children:
            self._write_instanciation(i)

        self.file.write("endmodule\n")

    def _write_ports(self, definition):
        self.file.write("(\n    ")
        first = True
        for p in definition.ports:
            if first:
                #self.file.write(p.name)    
                self._write_escapable_name(p.name)
                first = False
            else:
                self.file.write(",\n    ")
                #self.file.write(p.name)
                self._write_escapable_name(p.name)
        self.file.write("\n);\n")
        for p in definition.ports:
            
            self.file.write(self.direction_string_map[p.direction])
            self.file.write(" ")
            if not p.is_scalar:
                if p.is_downto:
                    left = p.lower_index + len(p.pins) - 1
                    right = p.lower_index
                else:
                    left = p.lower_index
                    right = p.lower_index + len(p.pins) - 1
                self.file.write("["+str(left)+":"+str(right)+"]")
            #self.file.write(p.name)
            self._write_escapable_name(p.name)
            self.file.write(";\n")

    def _write_cable(self, cable):
        self.file.write("wire ")
        if not cable.is_scalar:
            if cable.is_downto:
                left = cable.lower_index + len(cable.wires) - 1
                right = cable.lower_index
            else:
                left = cable.lower_index
                right = cable.lower_index + len(cable.wires) - 1
            self.file.write("["+str(left)+":"+str(right)+"]")
        #self.file.write(cable.name)
        self._write_escapable_name(cable.name)
        self.file.write(";\n")

    def _write_instanciation(self, instance):
        parameters = dict()
        for k, v in instance.data.items():
            if "VERILOG.star." == k[:13]:
                self.file.write("(* " + k[13:] + " = " + v + " *)\n")

            if "VERILOG.parameters." == k[:19]:
                parameters[k[19:]] = v
        #self.file.write(instance.reference.name)
        self._write_escapable_name(instance.reference.name)
        
        if len(parameters.items()) != 0:
            self.file.write("#(\n")
            first = True
            for k,v in parameters.items():
                if first:
                    first = False
                else:
                    self.file.write(",\n")
                self.file.write("." + k + "(" + v + ")")
            self.file.write(")\n")
        self.file.write(" ")
        #self.file.write(instance.name)
        self._write_escapable_name(instance.name)
        self.file.write("\n(\n")
        first = True
        port_pin_dict = dict()
        for port in instance.reference.ports:
            port_pin_dict[port] = []
        for pin in instance.pins:
            port_pin_dict[pin.inner_pin.port].append(pin)
        for p in instance.reference.ports:
            cable_name = self._write_port_wires(port_pin_dict[p])
            if cable_name is not None:
                if first:
                    self.file.write("    .")
                    #self.file.write(p.name)
                    self._write_escapable_name(p.name)
                    self.file.write("(")
                    #self._write_port_wires(port_pin_dict[p])
                    #self.file.write(cable_name)
                    self._write_escapable_name(cable_name)
                    self.file.write(")")
                    first = False
                #TODO: self.file.write(cableconnected to port name)
                else:
                    self.file.write(",\n    .")
                    #self.file.write(p.name)
                    self._write_escapable_name(p.name)
                    self.file.write("(")
                    #self._write_port_wires(port_pin_dict[p])
                    #self.file.write(cable_name)
                    self._write_escapable_name(cable_name)
                    self.file.write(")")
        self.file.write("\n);\n")
        

    def _write_port_wires(self, pins):
        string_to_write = ""
        # if len(pins) == 0:
        #     return
        pin = pins[0]
        if pin.wire == None:
            return None
        pin_cable = pin.wire.cable
        if len(pins) == len(pin_cable.wires):
            #self.file.write(pin_cable.name)
            string_to_write += pin_cable.name
        elif len(pins) == 1:
            if len(pin_cable.wires) == 1:
                #self.file.write(pin_cable.name)
                string_to_write += pin_cable.name
            else:
                i = 0
                for w in pin_cable.wires:
                    if w == pin.wire:
                        break
                    i += 1
                #self.file.write(pin_cable.name)
                #self.file.write("[" + str(i) + "]")
                string_to_write += pin_cable.name
                string_to_write +="[" + str(i) + "]"
        else:
            left_pin = pins[0]
            right_pin = pins[len(pins)-1]
            i = 0
            left_wire_index = None
            right_wire_index = None
            for w in pin_cable.wires:
                if w == left_pin.wire:
                    left_wire_index = i
                if w == right_pin.wire:
                    right_wire_index = i
                i += 1
                if left_wire_index == None and right_wire_index == None:
                    break
            #self.file.write(pin_cable.name)
            #self.file.write("[" + str(left_wire_index) + ":" + str(right_wire_index) + "]")
            string_to_write += pin_cable.name
            string_to_write += "[" + str(left_wire_index) + ":" + str(right_wire_index) + "]"
        return string_to_write

    def _write_escapable_name(self, str_in):
        if str_in[0] == "\\":
            self.file.write(str_in + " ")
        else:
            self.file.write(str_in)